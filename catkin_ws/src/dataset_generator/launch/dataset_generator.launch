<launch>

    <arg name="rviz" default="true"/>

    <!-- Specify the config files to use -->
    <rosparam ns="target_planner" command="load" file="$(find dataset_generator)/config/dataset_generator.yaml" />

    <!-- Planning Pipeline -->
    <include ns="/target_planner/ompl" file="$(find abb_irb1200_7_70_moveit_config)/launch/ompl_planning_pipeline.launch.xml"/>

     <!-- Trajectory execution  -->
    <include ns="target_planner" file="$(find abb_irb1200_7_70_moveit_config)/launch/trajectory_execution.launch.xml">
      <arg name="moveit_controller_manager" value="fake"/>
    </include>

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find abb_irb1200_7_70_moveit_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <!-- If needed, broadcast static tf for robot root -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 world base_link" />

    <!-- send fake joint values -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <rosparam param="source_list">["/target_planner/fake_controller_joint_states"]</rosparam>
    </node>

    <!-- Start robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Launch RViz -->
    <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false" if="$(arg rviz)"
      args="-d $(find dataset_generator)/rviz/target_planner.rviz" output="screen" required="true">
      <rosparam command="load" file="$(find abb_irb1200_7_70_moveit_config)/config/kinematics.yaml"/>
    </node>

    <node pkg="dataset_generator" type="target_planner" name="target_planner" output="screen" required="true"/>

    <include file="$(find dataset_generator)/launch/sim_camera.launch"/>

</launch>
